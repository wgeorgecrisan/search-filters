{"version":3,"sources":["SearchFilter.react.js","serviceWorker.js","index.js"],"names":["filtersState","content","validfilters","allGlobalFilters","_","map","element","key","each","filter","push","filtername","options","SearchFilterParent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","divideOnGroups","group1","getGroups","group2","group3","group4","group5","collection1","collection2","collection3","collection4","collection5","state","globalfilters","char","charCodeAt","String","fromCharCode","toUpperCase","includes","length","totalGroups","totalCollections","setState","getValueControl","removeFilter","event","preventDefault","currentTarget","value","collection","selectedFiltersCollection","splice","handleChangeOperator","operator","selectedOperator","handleButtonClick","nr","target","alphgroup","selectedCollection","updateParentSelectedFiltersCollection","data","parent","keyme","dataToUpdate","label","type","alphrange","selectedFilter","optionsForOperator","bind","assertThisInitialized","optionsForFilter1","handleFilterChange1","generateCharGroup","prevProps","selectedObject","keys","operators","list","description","selectedOption","char1","char2","a","i","j","group","optionsFilter","filterContainerArray","propsFilterContainerArrayElements","react_default","createElement","SearchFilter_react_FilterContainerElement","assign","Fragment","className","ButtonToolbar","Button","variant","size","active","onClick","react_select_esm","isSearchable","isDisabled","isClearable","placeholder","onChange","Component","FilterContainerElement","_this2","handleChangeFilter","optionsOperator","prevState","SearchFilters","_this3","search","selectedFiltersQueryString","SearchFilter_react_SearchFilterParent","Boolean","window","location","hostname","match","ReactDOM","render","SearchFilter_react","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.500b9021.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.sass';\nimport content from './contentfromv2.json';\nimport _ from 'underscore';\nimport Select from 'react-select';\nimport {ButtonToolbar , Button} from 'react-bootstrap';\nimport moment from 'moment';\n\n\nvar filtersState = content.validfilters;\nlet allGlobalFilters = [];\n\n_.map(filtersState,(element,key)=>{\n        _.each(element,(element, filter)=>{\n          allGlobalFilters.push({filtername: filter, options: element});\n        });\n});\n\n\n\nclass SearchFilterParent extends Component {\n   constructor(props){\n      super(props);\n      this.state = {\n        globalfilters: this.props.globalfilters,\n        alphgroup: 0,\n        alphrange: 0,\n        totalCollections: [],\n        totalGroups: [],\n        selectedCollection: [],\n        selectedOperator: '',\n        selectedFilter: '',\n        selectedFiltersCollection: []\n      }\n\n      this.optionsForOperator = this.optionsForOperator.bind(this);\n      this.optionsForFilter1 = this.optionsForFilter1.bind(this);\n      this.handleFilterChange1 = this.handleFilterChange1.bind(this);\n      this.generateCharGroup = this.generateCharGroup.bind(this);\n   }\n\n   componentDidMount() {\n       \n      \n   }\n\n   divideOnGroups = (content)=>{\n    var group1 = this.getGroups(1), group2 = this.getGroups(2) , group3 = this.getGroups(3), group4 = this.getGroups(4) , group5 = this.getGroups(5);\n    var collection1 = [],  collection2 = [], collection3 = [] ,collection4 = [], collection5 = [];\n\n    _.each(this.state.globalfilters,(element,key)=>{\n        var char = element.filtername.charCodeAt(0);\n        char = String.fromCharCode(char).toUpperCase();\n        \n        if(group1.includes(char)){\n            collection1.push(element);\n        } else if (group2.includes(char)) {\n          collection2.push(element);\n        } else if (group3.includes(char)) {\n          collection3.push(element);\n        } else if (group4.includes(char)) {\n          collection4.push(element);\n        } else if (group5.includes(char)) {\n          collection5.push(element);\n        }\n\n        if(key === this.state.globalfilters.length -1){\n          var totalGroups = [group1, group2 ,group3 , group4, group5];\n          var totalCollections = [collection1, collection2, collection3, collection4, collection5];\n          this.setState({totalCollections: totalCollections, totalGroups: totalGroups});\n        }\n    });\n     \n    \n   }\n\n   componentDidUpdate(prevProps){\n       if(prevProps.globalfilters !== this.props.globalfilters){\n          this.setState({globalfilters: this.props.globalfilters},function(){\n            this.divideOnGroups(this.state.globalfilters);\n          });\n       }\n   }\n\n\n  // function to modify for this project, borrowed from TAB2\n  getValueControl = () => {\n    /*\n    var defaultValue = this.props.value;\n    if (defaultValue && this.state.operator) {\n      if (defaultValue[0] === this.state.operator || this.state.operator === '!=' && defaultValue[0] === '!') {\n        // remove leading * or ^ or !\n        defaultValue = defaultValue.substring(1);\n      } else if (this.state.operator === '/') {\n        // range\n        defaultValue = defaultValue.split('/', 2);\n        var defaultValueFrom = defaultValue[0];\n        var defaultValueTo = defaultValue[1];\n      }\n    }\n\n    if (this.isDate()) {\n      if (this.state.operator == '/') { // between\n        // if any of the default values are a string like 'today' or 'tomorrow', don't use a DateInput\n        if (!(defaultValueFrom && !moment(defaultValueFrom).isValid() || defaultValueTo && !moment(defaultValueTo).isValid())) {\n          return [\n            <div className='field two wide' key={ 0 }><DateInput type={ this.getType() } freeForm={ this.state.freeForm } ref='valuefrom' defaultValue={ defaultValueFrom } /></div>,\n            <div className='field two wide' key={ 1 }><DateInput type={ this.getType() } freeForm={ this.state.freeForm } ref='valueto' defaultValue={ defaultValueTo } /></div>,\n          ];\n        }\n      }\n      if (this.state.operator != '|' && !(defaultValue && !moment(defaultValue).isValid())) { // not 'in'\n        return <div className='field four wide'><DateInput type={ this.getType() } freeForm={ this.state.freeForm } ref='value' defaultValue={ defaultValue } /></div>;\n      }\n    }\n\n    var type = 'text';\n    var pl = 'Enter value...';\n    if (this.isBool()) {\n      type = 'checkbox';\n    } else if (this.isNumber()) {\n      type = 'number';\n    }\n\n    if (this.state.operator == '/' && !this.isBool()) {\n      return [\n        <div className='field two wide' key={ 0 }><input type={ type } ref='valuefrom' placeholder='from' defaultValue={ defaultValueFrom } /></div>,\n        <div className='field two wide' key={ 1 }><input type={ type } ref='valueto' placeholder='to' defaultValue={ defaultValueTo } /></div>,\n      ];\n    }\n    if (this.state.operator == '=' || this.state.operator == '!=') {\n      var select = this._getSelectFromProps(this.props);\n\n      if (select) {\n        if (['customer', 'owner', 'supplier'].indexOf(select.toLowerCase()) > -1) {\n          var vprops = {\n            ref: 'value',\n            objectKey: select.toLowerCase().slice(0, 1).toUpperCase() + select.toLowerCase().slice(1),\n            defaultValue: defaultValue\n          };\n\n          // special bodge for finding agency managed properties (where an agency is a supplier)\n          if (this.props.filter.indexOf('activesupplierid') > -1) {\n            return [\n              <div className='field two wide' key={ 0 }>\n                <FilterSelectionModal.GlobalSearchSelectField {...vprops} />\n              </div>,\n              <div className='field two wide' key={ 1 }>\n                <AgencySelectList ref='supplieragency' defaultValue={ defaultValue } formField={ false } emptyOption />\n              </div>\n            ];\n          }\n\n          return (\n            <div className='field four wide'>\n              <FilterSelectionModal.GlobalSearchSelectField {...vprops} />\n            </div>\n          );\n        }\n\n        if (select.toLowerCase() === 'groupingvalue') {\n          return (\n            <div className='field four wide'>\n              <BasicGroupingValueSelectList ref='value' formField={ false } />\n            </div>\n          );\n        }\n\n        if (select.toLowerCase() === 'grouping') {\n          return (\n            <div className='field four wide'>\n              <GroupingSelectList ref='value' formField={ false } />\n            </div>\n          );\n        }        \n\n        if (select.toLowerCase() === 'office') {\n          return (\n            <div className='field four wide'>\n              <OfficeSelectList ref='value' formField={ false } />\n            </div>\n          );\n        }\n\n        if (select.toLowerCase() === 'tabsuser') {\n          vprops = {\n            type: 'text',\n            ref: 'value',\n            placeholder: pl,\n          };\n          return <div className='field four wide'><input {...vprops} /></div>;\n        }        \n\n        vprops = {\n          ref: 'value',\n          defaultValue: defaultValue,\n          entityType: select,\n          optionValue: 'id'\n        };\n        return <div className='field four wide'><FilterSelectionModal.SelectList {...vprops} /></div>;\n      }\n\n      if (this.props.filter === 'changedaytemplatetype') {\n        return (\n          <div className='field four wide'>\n            <select ref='value' defaultValue={ defaultValue }>\n              <option>Base</option>\n              <option>Branding</option>\n              <option>Property</option>\n            </select>\n          </div>\n        );\n      }\n    }\n\n    if (this.state.operator == '|') {\n      type = 'text';\n      pl = 'Enter values separated by the pipe (|) symbol...';\n    }\n\n    vprops = {\n      type: type,\n      ref: 'value',\n      placeholder: pl,\n    };\n\n    if (this.isBool()) {\n      vprops.defaultChecked = defaultValue;\n    } else {\n      vprops.defaultValue = defaultValue;\n    }\n\n    return <div className='field four wide'><input {...vprops} /></div>;\n    */\n  } // end of value control to modify for this project\n\n   optionsForOperator(selectedObject) {\n      let options = [];\n\n      if(selectedObject !== null && Object.keys(selectedObject || {}).length > 0){\n        _.each(selectedObject.value.options.operators,(operator, key)=>{\n          var label = 'Equals';\n\n          switch (operator) {\n            case '>':\n              label = 'Greater than or equals';\n              break;\n            case '<':\n              label = 'Less than or equals';\n              break;\n            case '|':\n              label = 'In';\n              break;\n            case '~':\n              label = 'Contains';\n              break;\n            case '^':\n              label = 'Unknown***';\n              break;  \n            case '*':\n              label = 'Starts with';\n              break;\n            case '/':\n              label = 'Between';\n              break;\n            case '!=':\n              label = 'Does not equal'\n              break;\n            default:\n              label = 'Equals'\n            }\n          options.push({ value: operator  , label: label });\n       });\n      }\n     \n      return options;\n   }\n\n   optionsForFilter1(list) {\n    let options = [];\n\n    if(list){\n      _.each(list,(element, key)=>{\n        options.push({ value: element  , label: element.filtername + ' - ' + element.options.description });\n     });\n    }\n     \n    return options;\n   }\n\n   removeFilter = (event)=> {\n     event.preventDefault();\n     let key = event.currentTarget.value;\n     var collection = this.state.selectedFiltersCollection;\n\n      collection.splice(key,1);\n      this.setState({selectedFiltersCollection: collection});\n    \n   }\n\n   handleFilterChange1(selectedOption) {\n      var selectedFiltersCollection = this.state.selectedFiltersCollection;\n\n      if(selectedOption !== null){\n        selectedOption.selectedOperator = '';\n        selectedFiltersCollection.push(selectedOption);\n        this.setState({selectedFilter: {} , selectedFiltersCollection: selectedFiltersCollection});\n      }\n        \n      else \n        this.setState({selectedFilter: {}});  \n   }\n\n   handleChangeOperator = (operator) => {\n      this.setState({selectedOperator: operator});  \n   }\n\n   generateCharGroup(char1,char2){\n        let a = [], i = char1.charCodeAt(0), j = char2.charCodeAt(0);\n        while(i <= j){\n            a.push(String.fromCharCode(i));\n            i++;\n        }\n        return a;\n   }\n\n   getGroups(group) {\n        switch(group){\n          case 1: \n            return this.generateCharGroup(\"A\",\"E\");\n          case 2: \n            return this.generateCharGroup(\"F\",\"J\"); \n          case 3: \n            return this.generateCharGroup(\"K\",\"O\"); \n          case 4: \n            return this.generateCharGroup(\"P\",\"T\");\n          case 5: \n            return this.generateCharGroup(\"U\",\"Z\");  \n          default:\n            return [];   \n        }\n   }\n\n   handleButtonClick = (event)=> {\n      var nr = event.target.value;\n    this.setState({ alphgroup: nr , selectedCollection: this.state.totalCollections[nr - 1]});\n   }\n\n   updateParentSelectedFiltersCollection = (data, parent, keyme)=>{\n     //use !!!! to update the value filter also\n     var dataToUpdate = this.state.selectedFiltersCollection;\n    _.map(dataToUpdate, (element,key)=>{\n          if(key === keyme && element.label === parent.label) {\n            if(data.type === 'operator'){\n              element.selectedOperator = data.value;\n            } else if (data.type === 'entity') {\n              element.label = data.value.label;\n              element.value = data.value.value;\n              element.selectedOperator = data.selectedOperator;\n            } else if (data.type === 'filtervalue'){\n              \n            }\n          }\n    });\n\n    this.setState({selectedFiltersCollection: dataToUpdate});\n   }\n\n   render () {\n      let optionsFilter = this.optionsForFilter1(this.state.selectedCollection);\n      var filterContainerArray = [];\n        \n        if(this.state.selectedFiltersCollection.length > 0){\n          var propsFilterContainerArrayElements = {\n            alphgroup: this.state.alphgroup,\n            updateParentSelectedFiltersCollection: this.updateParentSelectedFiltersCollection,\n            optionsForOperator: this.optionsForOperator,\n            optionsFilter: optionsFilter,\n            selectedFilter: this.state.selectedFilter,\n            handleChangeOperator: this.handleChangeOperator,\n            handleFilterChange1: this.handleFilterChange1,\n            getValueControl: this.getValueControl,\n            removeFilter: this.removeFilter\n          }\n\n          _.each(this.state.selectedFiltersCollection,(element,i)=>{\n              propsFilterContainerArrayElements.selectedFilter = element;\n              filterContainerArray.push(<FilterContainerElement key={element.value.filtername +  i} keyme={i} {...propsFilterContainerArrayElements} />);\n          });\n        } \n          \n\n       return (\n        <React.Fragment>\n          <p className='p-info'>1. Select alphabethical group of filters </p>\n          <ButtonToolbar>\n            <Button variant=\"outline-secondary\" size=\"sm\" active={this.state.alphgroup === '1' ? true : false} className='g-button' value={1} onClick={ this.handleButtonClick  }>A to... E</Button>\n            <Button variant=\"outline-secondary\" size=\"sm\" active={this.state.alphgroup === '2' ? true : false} className='g-button' value={2}  onClick={ this.handleButtonClick }>F to... J</Button>\n            <Button variant=\"outline-secondary\" size=\"sm\" active={this.state.alphgroup === '3' ? true : false} className='g-button' value={3} onClick={ this.handleButtonClick }>K to... O</Button>\n            <Button variant=\"outline-secondary\" size=\"sm\" active={this.state.alphgroup === '4' ? true : false} className='g-button' value={4}  onClick={ this.handleButtonClick }>P to... T</Button>\n            <Button variant=\"outline-secondary\" size=\"sm\" active={this.state.alphgroup === '5' ? true : false} className='g-button' value={5} onClick={ this.handleButtonClick }>U to... Z</Button>\n          </ButtonToolbar>\n          <div className='infos'>\n              <span> {this.state.totalCollections[0] ? this.state.totalCollections[0].length : null} Filters</span>\n              <span> {this.state.totalCollections[1] ? this.state.totalCollections[1].length : null} Filters</span>\n              <span> {this.state.totalCollections[2] ? this.state.totalCollections[2].length : null} Filters</span>\n              <span> {this.state.totalCollections[3] ? this.state.totalCollections[3].length : null} Filters</span>\n              <span> {this.state.totalCollections[4] ? this.state.totalCollections[4].length : null} Filters</span>\n          </div>\n          <p className='p-info2'>2. Select filter, operator and value </p>\n          {filterContainerArray}\n          \n          <div className='selectcontainer-initial'>\n             <div className='new-filter'> Add new filter</div>\n            <Select className='beautify'\n              isSearchable isDisabled={this.state.alphgroup > 0 ? false : true } isClearable\n              placeholder='Type to search ... '\n              value={Object.keys(this.state.selectedFilter).length > 0 ? this.state.selectedFilter : ''}\n              onChange={this.handleFilterChange1}\n              options={optionsFilter}\n            />\n          </div>\n\n        </React.Fragment>\n        );\n   }\n}\n\nclass FilterContainerElement extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedOperator: this.props.selectedFilter.selectedOperator,\n      selectedFilter: this.props.selectedFilter,\n      optionsOperator: []\n    }\n  }\n \n\n  componentDidMount(){\n    var optionsOperator = this.props.optionsForOperator(this.state.selectedFilter);\n    this.setState({ optionsOperator: optionsOperator});\n  }\n\n  handleChangeOperator = (operator) => {\n    this.props.updateParentSelectedFiltersCollection({value: operator , type: \"operator\"}, this.state.selectedFilter,this.props.keyme);\n    this.setState({selectedOperator: operator});  \n  }\n\n  handleChangeFilter = (filter) => {\n    this.props.updateParentSelectedFiltersCollection({value: filter , type: \"entity\"}, this.state.selectedFilter,this.props.keyme);\n    this.setState({selectedFilter: filter});  \n }\n\n componentDidUpdate(prevProps, prevState) {\n      if(prevProps.selectedFilter !== this.props.selectedFilter){\n        this.setState({selectedFilter: this.props.selectedFilter , selectedOperator: this.props.selectedFilter.selectedOperator },function(){\n          var  optionsOperator = this.props.optionsForOperator(this.state.selectedFilter);\n\n          this.setState({optionsOperator: optionsOperator});\n        });\n      }\n }  \n\n  render() {\n\n\n     return (\n     <React.Fragment>\n      \n      <div className='selectcontainer new-div'>\n      <Select className='beautify'\n        isSearchable isDisabled={this.props.alphgroup > 0 ? false : true } isClearable={false}\n        placeholder='Type to search ... '\n        value={this.state.selectedFilter}\n        onChange={this.handleChangeFilter}\n        options={this.props.optionsFilter}\n     />\n\n     {this.state.selectedFilter && <Select className='operators' isSearchable \n        placeholder='Operators'\n        value={this.state.selectedOperator}\n        onChange={this.handleChangeOperator}\n        options={this.state.optionsOperator}\n      />}\n\n      {this.state.selectedOperator && this.props.getValueControl() }\n      <Button variant=\"outline-danger\" size=\"sm\"  className='x-button' value={this.props.keyme} onClick={ this.props.removeFilter }>X</Button>\n    </div>\n   </React.Fragment>);\n  } \n}\n\n\n\nclass SearchFilters extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      globalfilters: [],\n      selectedFiltersQueryString: ''\n    };\n  }\n\n  search = ()=>{\n\n  }\n\n  componentDidMount() {\n    this.setState({globalfilters: allGlobalFilters});\n  }\n\n  render() {\n    return (\n      \n      <div className=\"main-container\">\n          <div className='header'> Search Filter TOCC Api v2 </div>\n          <SearchFilterParent globalfilters={this.state.globalfilters} />\n          <Button variant=\"outline-primary\"  className='search-button' value={''} onClick={ this.search }>Initiate Search</Button>\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default SearchFilters;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport SearchFilter from './SearchFilter.react';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<SearchFilter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}